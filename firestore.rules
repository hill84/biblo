rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /// RULES ///
    match /users/{uid} {
    	allow read;
      allow create: if isValidUser();
      allow update: if isUpdatableUser() && ((isEditor() && isAdmin()) || isOwner(uid));
    	allow delete: if (isEditor() && isAdmin()) || isOwner(uid);

      match /challenges/{cid} {
        allow read;
        allow update: if isEditor();
        allow create, delete: if isEditor() && isAdmin();
      }

      match /collections/{cid} {
        allow read;
        allow update: if isEditor();
        allow create, delete: if isEditor() && isAdmin();
      }

      match /authors/{aid} {
        allow read;
        allow update: if isEditor();
        allow create, delete: if isEditor() && isAdmin();
      }
    }

    match /notifications/{uid} {
    	allow read;
      allow create, update: if isEditor();
      allow delete: if isEditor() && (isAdmin() || isOwner(uid));
    }

    match /{path=**}/notes/{uid} {
      allow read;
      allow create, update: if isEditor();
      allow delete: if isEditor() && (isAdmin() || isOwner(uid));
    }

    match /followers/{uid} {
    	allow read;
      allow write: if isEditor();
    }

    match /followings/{uid} {
    	allow read;
      allow write: if isEditor();
    }
    
    match /books/{bid} {
    	allow read;
      allow create: if isEditor() && isValidBook();
      allow update: if isEditor() && isValidBook() && (incomingData().bid == existingData().bid);
      allow delete: if isEditor() && isAdmin();
    }
    
    match /shelves/{uid} {
      allow read;
      allow write: if isEditor() && (isAdmin() || isOwner(uid));

    	match /books/{bid} {
        allow read;
        allow create: if isEditor();
        allow update: if isEditor() && incomingData().bid == existingData().bid;
        allow delete: if isEditor();
      }
    }
    
    match /reviews/{bid} {
    	allow read;
      allow write: if isEditor();

      match /reviewers/{uid}/commenters/{cid} {
        allow read;
        allow update: if isEditor();
        allow create, delete: if isEditor() && (isAdmin() || isOwner(cid));
      }
    }

    match /{path=**}/reviewers/{uid} {
      allow read;
      allow write: if isEditor();
    }
    
    match /authors/{aid} {
      allow read;
      allow create, update: if isEditor();
      allow delete: if isEditor() && isAdmin();

      match /followers/{uid} {
        allow read;
        allow write: if isEditor() && (isAdmin() || isOwner(uid));
      }
    }
    
    match /collections/{cid} {
      allow read;
      allow create, update: if isEditor();
      allow delete: if isEditor() && isAdmin();
      
    	match /books/{bid} {
        allow read;
        allow create, update: if isEditor();
        allow delete: if isEditor() && isAdmin();
      }

      match /followers/{uid} {
        allow read;
        allow write: if isEditor() && (isAdmin() || isOwner(uid));
      }
    }

    match /genres/{gid} {
      allow read;
      allow create, update: if isEditor();
      allow delete: if isEditor() && isAdmin();

      match /followers/{uid} {
        allow read;
        allow write: if isEditor() && (isAdmin() || isOwner(uid));
      }
    }

    match /quotes/{qid} {
    	allow read;
      allow write: if isEditor();
    }

    match /challenges/{cid} {
    	allow read;
      allow write: if isEditor();
    }
    
    match /counters/{cid} {
      allow read;
      allow write: if isEditor() && isAdmin();
    }
    
    match /admin/{document=**} {
    	allow read: if isAdmin();
      allow write: if isEditor() && isAdmin();
    }

    match /recommendations/{uid} {
    	allow read;
      allow write: if isEditor() && (isAdmin() || isOwner(uid));
    }

    /// FUNCTIONS ///
    
    // function isSignedIn() { return request.auth != null; }

    // function emailVerified() { return request.auth.token.email_verified; }
    
    // function currentUser() { return request.auth; }
    
    // function userHasRole(role) { return getUserData().roles[role] == true; }

    // function userHasAnyRole(roles) { return getUserData().roles.keys().hasAny(roles); }

    // function userHasAllRoles(roles) { return getUserData().roles.keys().hasAll(roles); }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      return getUserData().roles['admin'] == true;
    }

    function isEditor() {
      return getUserData().roles['editor'] == true;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function isValidUser() {
      return incomingData().keys().hasAll([
        'creationTime', 
        'uid', 
        'displayName', 
        'email', 
        'roles', 
        'stats'
      ]);
    }

    function isUpdatableUser() {
      return isValidUser() && incomingData().creationTime == existingData().creationTime;
    }

    function isValidBook() {
      return incomingData().keys().hasAll([
        'ISBN_13', 
        'authors', 
        'bid',
        'EDIT',
        'pages_num', 
        'publisher', 
        'title', 
        'title_sort',
        'readers_num',
        'reviews_num',
        'ratings_num',
        'rating_num'
      ]) 
      && incomingData().pages_num is int
      && incomingData().readers_num is int
      && incomingData().reviews_num is int
      && incomingData().ratings_num is int
      && incomingData().rating_num is int;
    }
  }  
}